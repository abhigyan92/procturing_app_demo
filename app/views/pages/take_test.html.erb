<div class="d-flex justify-content-center py-5">
  <div class="d-flex flex-column p-5 bg-white border">
    <div class="d-flex justify-content-between mb-4">
      <div class="d-flex justify-content-center align-items-start flex-column">
        <label class="text-muted font-weight-bold text-large">Test is in progress...</label>
        <label class="small text-info">(<%= @user.email %>)</label>
      </div>
      <%= link_to "Submit", display_activity_log_path(@user), class: "btn btn-success" %>
    </div>
    <div class="d-flex justify-content-between">
      <button onclick="handleStopRecording()" class="btn btn-danger">Stop Recording</button>
    </div>
  </div>
</div>
<div class="mb-5 video-container">
  <video id="local-video" autoplay></video>
  <button id="a" class="btn fullscreen" title="Full screen">
    <i class="fas fa-expand"></i>
  </button>
</div>
<span data-submission-id="<%= @submission.id %>"></span>
<script type="text/javascript">
let localVideo;
let el;
window.onload = () => {
  localVideo = document.getElementById("local-video");
};
var recordedChunks = [];
function handleStopRecording(){
  console.log(recordedChunks);
  var blob = new Blob(recordedChunks, {
    type: 'video/webm'
  });
  var url = URL.createObjectURL(blob);
  console.log(url);
  var a = document.createElement('a');
  document.body.appendChild(a);
  a.style = 'display: none';
  a.href = url;
  a.download = 'test.webm';
  a.click();
  window.URL.revokeObjectURL(url);
  window.mediaRecorder.stop();

}
function handleDataAvailable(event) {
  console.log(event.data);
  if (event.data.size > 0) {
    recordedChunks.push(event.data);
  } else {
    // ...
  }
}

function errorHandlerFunction(event){
  console.log(event.error.name);
}
function startRecording(stream){
  var options = {mimeType: 'video/webm;codecs=vp9'};
  window.mediaRecorder = new MediaRecorder(stream, options);
  console.log(mediaRecorder);
  window.mediaRecorder.ondataavailable = handleDataAvailable;
  window.mediaRecorder.onerror = errorHandlerFunction;
  window.mediaRecorder.start(100);
  console.log(mediaRecorder);
}

// Initialize user's own video
document.onreadystatechange = () => {
  if (document.readyState === "interactive") {
    navigator.mediaDevices
      .getUserMedia({
        audio: false,
        video: true
      })
      .then(stream => {
        localVideo.srcObject = stream;
        localVideo.muted = true;

        startRecording(stream);
      })
      .catch(logError);
  }
  document.getElementById('a').addEventListener('click', function(){
      openFullscreen();
  })
};


function fire_event(name,time,value){
    // do fetch request ot save data.
    console.log('name -->', name);
    console.log('time -->', time);
    console.log('value -->', value);
    el = document.querySelector('span');
    var submissionId = el.getAttribute('data-submission-id');
    var xhttp = new XMLHttpRequest();
    xhttp.open("POST", "/record_event", true);
    xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    xhttp.send("name=" + name + "&value=" + value + "&submissionID=" + submissionId);
}
document.addEventListener('DOMContentLoaded', function(){
    window.onunload = function(e){
        fire_event('unload', Date.now());
    }
    document.addEventListener('keydown', function(e){
        fire_event('key_down', Date.now(), e.which);
    })
    document.addEventListener('keypress', function(e){
        fire_event('key_press', Date.now(), e.which);
    })
    document.addEventListener('keyup', function(e){
        fire_event('key_up', Date.now(), e.which);
    })
})

window.addEventListener('focus', function(){ fire_event('focus', Date.now()) });
window.addEventListener('blur', function(){ fire_event('blur', Date.now()) });


var elem = document.documentElement;
function openFullscreen() {
    fire_event('open_fullscreen',Date.now());
    if (elem.requestFullscreen) {
        elem.requestFullscreen();
    } else if (elem.mozRequestFullScreen) { /* Firefox */
        elem.mozRequestFullScreen();
    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
        elem.webkitRequestFullscreen();
    } else if (elem.msRequestFullscreen) { /* IE/Edge */
        elem.msRequestFullscreen();
    }
}

if (document.addEventListener) {
    document.addEventListener('fullscreenchange', exitHandler, false);
    document.addEventListener('mozfullscreenchange', exitHandler, false);
    document.addEventListener('MSFullscreenChange', exitHandler, false);
    document.addEventListener('webkitfullscreenchange', exitHandler, false);
}

function exitHandler() {
    if (!document.webkitIsFullScreen && !document.mozFullScreen && !document.msFullscreenElement ) {
       fire_event('close_fullscreen',Date.now());
    }
}

window.addEventListener('beforeunload', function (e) {
    e.preventDefault();
    e.returnValue = '';
    fire_event('beforeunload', Date.now());
});

const logError = error => console.warn("Whoops! Error:", error);

</script>
